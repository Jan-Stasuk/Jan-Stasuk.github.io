13)  Create Decimal Numbers with JavaScript :
var ourDecimal = 5.7;

// Only change code below this line

var myDecimal = 3.8; 
Here i create decimal number;


14) Multiply Two Decimals with JavaScript :
var product = 2.0 * 2.5; 

here i multiplied two decimals ))

15) Divide One Decimal by Another with JavaScript:
var quotient = 4.4 / 2.0; // Fix this line

here i divide one decimal by another with JS ;

16)  Finding a Remainder in JavaScript :
// Only change code below this line
var remainder = 11 % 3;
11 % 3 = 2 
math.floor(11/3) = 3 (Quotient)
3 * 3 = 9 
11 - 9 = 2 (Remainder)  

In such way i found reminder

17) Compound Assignment With Augmented Addition :
var a = 3;
var b = 17;
var c = 12;

// Only modify code below this line

a += 12;
b += 9;
c += 7;

I used operators which do both a mathematical operation and assignment in one step.

18) Compound Assignment With Augmented Subtraction :
var a = 11;
var b = 9;
var c = 3;

// Only modify code below this line

a -= 6;
b -= 15;
c -= 1;


I Converted the assignments for a, b, and c - using  the "-=" operator.

19) Compound Assignment With Augmented Multiplication:
var a = 5;
var b = 12;
var c = 4.6;

// Only modify code below this line

a *= 5;
b *= 3;
c *= 10;

I Converted the assignments for a, b, and c using  the "*=" operator.

20) Compound Assignment With Augmented Division :
var a = 48;
var b = 108;
var c = 33;

// Only modify code below this line

a /= 12;
b /= 4;
c /= 11;
I Converted the assignments for a, b, and c using the "/=" operator.

21) Declare String Variables :
// Example
var firstName = "Alan";
var lastName = "Turing";

// Only change code below this line
var myFirstName = "Ivan";
var myLastName ="Stasuk";
I create two string variables )

22)Escaping Literal Quotes in Strings :
var myStr = "I am a \" double quoted\" string inside \"double quotes\". "; // Change this line
I Used backslashes to make this exersize ))

23)Quoting Strings with Single Quotes :
var myStr = '<a href="http://www.example.com" target="_blank">Link</a>'; 
i removed all backslashes and made it only using quotes 

24)Escape Sequences in Strings :


25)  Concatenating Strings with Plus Operator:
// Example
var ourStr = "I come first. " + "I come second.";

// Only change code below this line

var myStr = "This is the start. " + "This is the end.";
I made concatenation of two strings .

26)Concatenating Strings with the Plus Equals Operator:
// Example
// Example
var ourStr = "I come first. ";
ourStr += "I come second.";

// Only change code below this line

var myStr = "This is the first sentence.";
myStr += " This is the second sentence.";
I made concatenation with Plus Equals operators.

27) Constructing Strings with Variables:
// Example
var ourName = "freeCodeCamp";
var ourStr = "Hello, our name is " + ourName + ", how are you?";

// Only change code below this line
var myName = "ivanStasuk";
var myStr = "My name is " + myName + " and I am well";
i create two strings with "+" method.

28)Appending Variables to Strings:
// Example
var anAdjective = "awesome!";
var ourStr = "freeCodeCamp is ";
ourStr += anAdjective;

// Only change code below this line

var someAdjective = "perfectAwesomeSuper";
var myStr = "Learning to code is ";
myStr += someAdjective; 
I create string using "+=" operator.

29)Find the Length of a String:
// Example
var firstNameLength = 0;
var firstName = "Ada";

firstNameLength = firstName.length;

// Setup
var lastNameLength = 0;
var lastName = "Lovelace";

// Only change code below this line.

lastNameLength = lastName.length;
I found the lrnght of the string using ".lenght" property.

30)Use Bracket Notation to Find the First Character in a String 
// Example
var firstLetterOfFirstName = "";
var firstName = "Ada";

firstLetterOfFirstName = firstName[0];

// Setup
var firstLetterOfLastName = "";
var lastName = "Lovelace";

// Only change code below this line
firstLetterOfLastName = lastName[0];
I Used bracket notation to find the first letter;

31) Understand String Immutability:
// Setup
var myStr = "Jello World";

// Only change code below this line
myStr = "Hello World";
myStr[0] = "H"; // Fix Me


32) Use Bracket Notation to Find the Nth Character in a String :
// Example
var firstName = "Ada";
var secondLetterOfFirstName = firstName[1];

// Setup
var lastName = "Lovelace";

// Only change code below this line.
var thirdLetterOfLastName = lastName[2];

33) Use Bracket Notation to Find the Last Character in a String:
// Example
var firstName = "Ada";
var lastLetterOfFirstName = firstName[firstName.length - 1];

// Setup
var lastName = "Lovelace";

// Only change code below this line.
var lastLetterOfLastName = lastName[lastName.lenght-1];

34) Use Bracket Notation to Find the Nth-to-Last Character in a String:
// Example
var firstName = "Ada";
var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];

// Setup
var lastName = "Lovelace";

// Only change code below this line
var secondToLastLetterOfLastName = lastName[lastName.length - 2];

35)Word Blanks:
function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {
  // Your code below this line
  var result = "dog" + "big" + "ran" + "quickly";

  // Your code above this line
  return result;
}

// Change the words here to test your function
wordBlanks("dog", "big", "ran", "quickly");
 
36) Store Multiple Values in one Variable using JavaScript Arrays:
// Example
var ourArray = ["John", 23];

// Only change code below this line.
var myArray = ["string" , 32]; 

37) Nest one Array within Another Array:
// Example
var ourArray = [["the universe", 42], ["everything", 101010]];

// Only change code below this line.
var myArray = [["Ivan" , 32],["Stasuk" , 32]];

38) Access Array Data with Indexes:
// Example
var ourArray = [50,60,70];
var ourData = ourArray[0]; // equals 50

// Setup
var myArray = [50,60,70];

// Only change code below this line.
var myData = myArray[0];

39) Modify Array Data With Indexes :
// Example
var ourArray = [18,64,99];
ourArray[1] = 45; // ourArray now equals [18,45,99].

// Setup
var myArray = [18,64,99];

// Only change code below this line.
myArray[0] = 45; 

40) Access Multi-Dimensional Arrays With Indexes:
// Setup
var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];

// Only change code below this line.
var myData = myArray[2][1];

41) Manipulate Arrays With .push()  :
// Example
var ourArray = ["Stimpson", "J", "cat"];
ourArray.push(["happy", "joy"]); 
// ourArray now equals ["Stimpson", "J", "cat", ["happy", "joy"]]

// Setup
var myArray = [["John", 23], ["cat", 2]];

// Only change code below this line.
myArray.push(["dog", 3]);

42) Manipulate Arrays With pop():
// Example
var ourArray = [1,2,3];
var removedFromOurArray = ourArray.pop(); 
// removedFromOurArray now equals 3, and ourArray now equals [1,2]

// Setup
var myArray = [["John", 23], ["cat", 2]];

// Only change code below this line.
var removedFromMyArray = myArray.pop();

43) Manipulate Arrays With shift():
// Example
var ourArray = ["Stimpson", "J", ["cat"]];
var removedFromOurArray = ourArray.shift();
// removedFromOurArray now equals "Stimpson" and ourArray now equals ["J", ["cat"]].

// Setup
var myArray = [["John", 23], ["dog", 3]];

// Only change code below this line.
var removedFromMyArray = myArray.shift();

44) Manipulate Arrays With unshift():
// Example
var ourArray = ["Stimpson", "J", "cat"];
ourArray.shift(); // ourArray now equals ["J", "cat"]
ourArray.unshift("Happy"); 
// ourArray now equals ["Happy", "J", "cat"]

// Setup
var myArray = [["John", 23], ["dog", 3]];
myArray.shift();

// Only change code below this line.
myArray.unshift( ["Paul",35]);

45) Shopping List:
var myList = [["Chocolate Bar", 15],["apple", 10],["lemon",23],["cherry", 17], ["kiwi",8], ["melon", 5]];

46) Write Reusable JavaScript with Functions: 
// Example
function ourReusableFunction() {
  console.log("Heyya, World");
}

ourReusableFunction();

// Only change code below this line
function reusableFunction (){
    console.log("Hi World");
}
reusableFunction();

47) Passing Values to Functions with Arguments:
// Example
function ourFunctionWithArgs(a, b) {
  console.log(a - b);
}
ourFunctionWithArgs(10, 5); // Outputs 5

// Only change code below this line.
function functionWithArgs (a, b){
  console.log(a + b);
}
functionWithArgs(1 , 2); 
function functionWithArgs (a, b){
  console.log(a + b);
}
functionWithArgs(7 , 9);

48) Global Scope and Functions :
// Declare your variable here
var myGlobal;
myGlobal= 10;
function fun1() {
  oopsGlobal = 5; // Assign 5 to oopsGlobal Here

}

// Only change code above this line
function fun2() {
  var output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
}

49)  Local Scope and Functions :
function myLocalScope() {
  var myVar = 'use strict'; // you shouldn't need to edit this line
  
  console.log(myVar);
}


// Run and check the console
// myVar is not defined outside of myLocalScope


// Now remove the console log line to pass the test

50)  Global vs. Local Scope in Functions:
// Setup
var outerWear = "T-Shirt";

function myOutfit() {
  // Only change code below this line
  
  var outerWear = "sweater";
  
  // Only change code above this line
  return outerWear;
}

myOutfit();

51) Return a Value from a Function with Return:
// Example
function minusSeven(num) {
  return num - 7;
}

// Only change code below this line
function timesFive(num){
  return num + 20;
}
var answer = timesFive(5);

function timesFive(num){
  return num * 5;
}
var answer = timesFive(5);

function timesFive(num){
  return num + 8;
}
var answer = timesFive(2);

function timesFive(num){
  return num + 0;
}
var answer = timesFive(0);

console.log(minusSeven(10));

52)  Understanding Undefined Value returned from a Function:
// Example
var sum = 0;
function addThree() {
  sum = sum + 3;
}

// Only change code below this line
var sum = 8;
function addFive(){
  sum = sum + 5;
}


// Only change code above this line
var returnedValue = addFive();

53) Assignment with a Returned Value :
// Example
var changed = 0;

function change(num) {
  return (num + 5) / 3;
}

changed = change(10);

// Setup
var processed = 0;

function processArg(num) {
  return (num + 3) / 5;
}

// Only change code below this line

processed = processArg(7);

54) Stand in Line :



55)Understanding Boolean Values:
function welcomeToBooleans() {

// Only change code below this line.

return true; // Change this line

// Only change code above this line.
} 

56) Use Conditional Logic with If Statements:
// Example
function ourTrueOrFalse(isItTrue) {
  if (isItTrue) { 
    return "Yes, it's true";
  }
  return "No, it's false";
}

// Setup
function trueOrFalse(wasThatTrue) {

  // Only change code below this line.
  function trueOrFalse(){
      if(true) {
          return "Yes, that was true";
      } 
      if(false){
      return "No, that was false";
      }
  }
  
  
  // Only change code above this line.

}

// Change this value to test
trueOrFalse(false);

57) Comparison with the Equality Operator :
// Setup
function testEqual(val) {
  if (val==12) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

// Change this value to test
testEqual(12);

58) Comparison with the Strict Equality Operator :
// Setup
function testStrict(val) {
  if (val===7) { // Change this line
    return "Equal";
  }
  if (val === "7")
  return "Not Equal";

  if (val === "10")
  return "Not Equal";
}

testStrict(10);
testStrict(7);

59) Comparison with the Greater Than Operator :
function testGreaterThan(val) {
  if (val>100) {  // Change this line
    return "Over 100";
  }
  
  if (val>10) {  // Change this line
    return "Over 10";
  }

  return "10 or Under";
}

// Change this value to test
testGreaterThan(10);

60) Comparison with the Greater Than Or Equal To Operator:

function testGreaterOrEqual(val) {
  if (val>= 20) {  // Change this line
    return "20 or Over";
  }
  
  if (val>= 10) {  // Change this line
    return "10 or Over";
  }

  return "Less than 10";
}

// Change this value to test
testGreaterOrEqual(10);

61) Comparison with the Less Than Operator:
function testLessThan(val) {
  if (val< 25) {  // Change this line
    return "Under 25";
  }
  
  if (val< 55) {  // Change this line
    return "Under 55";
  }

  return "55 or Over";
}

// Change this value to test
testLessThan(10);

62) Comparison with the Less Than Or Equal To Operator:

function testLessOrEqual(val) {
  if (val <= 12) {  // Change this line
    return "Smaller Than or Equal to 12";
  }
  
  if (val <= 24) {  // Change this line
    return "Smaller Than or Equal to 24";
  }

  return "More Than 24";
}

// Change this value to test
testLessOrEqual(10);

63) Comparisons with the Logical And Operator:
function testLogicalAnd(val) {
  // Only change code below this line
if (val <= 50 && val >= 25) {
      return "Yes";
    }
  

  // Only change code above this line
  return "No";
}

// Change this value to test
testLogicalAnd(10);

64) Comparisons with the Logical Or Operator  :
function testLogicalOr(val) {
  // Only change code below this line

  

  if (val < 10 || val > 20 ) {
    return "Outside";
  }

  // Only change code above this line
  return "Inside";
}

// Change this value to test
testLogicalOr(15);

65) Introducing Else Statements:

function testElse(val) {
  var result = "";
  // Only change code below this line
  
  if (val > 5) {
    result = "Bigger than 5";
  }
  
 else {
    result = "5 or Smaller";
  }
  
  // Only change code above this line
  return result;
}

// Change this value to test
testElse(4);

66) Introducing Else If Statements :
function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  } else if (val < 5) {
    return "Smaller than 5";
  } else {return "Between 5 and 10";
  }
}

// Change this value to test
testElseIf(7);
 
67)Logical Order in If Else Statements :
function orderMyLogic(val) {
  
    if (val < 5) {
    return "Less than 5";
    } else if (val < 10) {
    return "Less than 10";
  } else {
    return "Greater than or equal to 10";
  }
}

// Change this value to test
orderMyLogic(7);

70)Chaining If Else Statements :
function testSize(num) {
  // Only change code below this line
  if (num < 5){
    return "Tiny";
  } else if(num < 10){
    return "Small";
  } else if(num <15){
    return "Medium";
  } else if(num <20){
    return "Large";
  } else if(num >=20){
    return "Huge";
  } else 
  
  return "Change Me";
  // Only change code above this line
}

// Change this value to test
testSize(7);
